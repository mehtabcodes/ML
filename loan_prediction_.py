# -*- coding: utf-8 -*-
"""Loan prediction .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iK-RFCiDztlfOq7RqjYJNJrYSmD2MAeL
"""

import pandas as pd

import numpy as np

import seaborn as sns

from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score

loan_dataset=pd.read_csv("/content/Loan.zip")

type(loan_dataset)

loan_dataset.head()

loan_dataset.shape

loan_dataset.describe()

#number of missing values in thv is course
loan_dataset.isnull().sum()

loan_dataset = loan_dataset.dropna()



#number of missing values in thv is course
loan_dataset.isnull().sum()

loan_dataset.replace({"Loan_Status":{'N':0,'Y':1}},inplace=True)

loan_dataset.head()

#dependent colum values
loan_dataset['Dependents'].value_counts()

#replacing the value of 3+ TO 4
loan_dataset=loan_dataset.replace(to_replace='3+', value=4)



#dependent colum values
loan_dataset['Dependents'].value_counts()

#education and loan status(plotting)
sns.countplot(x='Education', hue='Loan_Status', data=loan_dataset)

#for marital status
sns.countplot(x='Married', hue='Loan_Status',data=loan_dataset)



#for marital status
sns.countplot(x='Gender', hue='Loan_Status',data=loan_dataset)

#covert categorical columns to numerical values
loan_dataset.replace({'Married':{'No':0,'Yes':1},'Gender':{'Female':0,'Male':1},'Self_Employed':{'No':0,'Yes':1},
                    'Property_Area':{'Rural':0,'Semiurban':1,'Urban':2},'Education':{'Not Graduate':0,'Graduate':1}},inplace=True)

loan_dataset.head()

#separating output(label) and all the other factors(data) from each other
X=loan_dataset.drop(columns=['Loan_ID','Loan_Status'],axis=1)
Y=loan_dataset['Loan_Status']

print(X)
print(Y)

X_train,X_test,Y_train,Y_test= train_test_split(X,Y,test_size=0.1,stratify=Y,random_state=2)

print(X.shape,X_train.shape,X_test.shape)

#creating svm

classifier=svm.SVC(kernel='linear')

classifier.fit(X_train,Y_train)

#accuracy
X_train_prediction=classifier.predict(X_train)
training_data_accuracy=accuracy_score(X_train_prediction, Y_train)

print('Accuracy on training data : ', training_data_accuracy)

X_test_prediction=classifier.predict(X_test)
test_data_accuracy=accuracy_score(X_test_prediction, Y_test)

print("test data accuracy : ", test_data_accuracy)

loan_dataset.head()

input_data=(1,1,0,1,0,3567,2322,234,360,1.0,1)

input_data_as_numpy_array=np.asarray(input_data)

# reshape the array as we are predicting for one instance
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

prediction = classifier.predict(input_data_reshaped)
print(prediction)

if (prediction[0] == 0):
  print('The person is not eligible for loan')
else:
  print('The person is eligible for loan')

import pickle

filename = 'trained_model.sav'
pickle.dump(classifier, open(filename, 'wb'))

#loading the saved model
loaded_model=pickle.load(open('trained_model.sav','rb') )

input_data=(1,1,0,1,0,3567,2322,234,360,1.0,1)

input_data_as_numpy_array=np.asarray(input_data)

# reshape the array as we are predicting for one instance
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

prediction = loaded_model.predict(input_data_reshaped)
print(prediction)

if (prediction[0] == 0):
  print('The person is not eligible for loan')
else:
  print('The person is eligible for loan')